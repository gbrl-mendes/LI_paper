---
title: "Análise de eDNA metabarcoding Cipó"
author: "Isadora Valentine"
format: pdf
editor: visual
editor_options: 
  chunk_output_type: console
---

### Código análises eDNA metabarcoding Cipó

#### Introdução

-   Todos os códigos utilizados na realização do projeto "DNA ambiental no monitoramento da ictiofauna do Parque Nacional da Serra do Cipó".

#### Pacotes

```{r}
# Loading libraries
library("tidyverse")
library("Biostrings")
library("DECIPHER")
library("phyloseq")
library("vegan")
library("readxl")
library("ggpubr")
library("ggplot2")
library("ggsignif")
library("ggrepel")
library("openxlsx")
library("colorspace")
```

#### Criação de diretórios

-   Criação dos diretórios onde a análise será realizada e onde os resultados serão salvos.

    ```{r}
    # Define standard output/input folder system and verify or create directories as needed
    {
      prjct_path <- "/home/isav/projetos/tcc_eDNA_cipo"
      prjct_radical <- "eDNA_cipo"
      scripts_path <- paste0(prjct_path, "/scripts")
      results_path <- paste0(prjct_path, "/results")
      figs_path <- paste0(results_path, "/figures")
      tbl_path <- paste0(results_path, "/tables")
      env_path <- paste0(prjct_path, "/environment")
      data_path <- paste0(prjct_path, "/data")
      paths <- c(scripts_path, results_path, figs_path, 
             tbl_path, env_path, data_path)
    }

    for (dir in paths) {
      if (dir.exists(dir)) {
    print(paste("The directory", dir, "already exists!"))
      } else {
    print(paste("Making", dir, "!" ))
    dir.create(dir) 
      }
    }
    ```

### Pré-análise

-   Análise preliminar dos dados brutos sem a curadoria integrativa das ASVs.

#### Obtenção de dados brutos

-   Carregamento da tabela de resultados completos, com dados brutos.

    ```{r}
    # resultados preliminares
    pre_raw_results_tbl <-
      read.csv("/home/isav/projetos/tcc_eDNA_cipo/data/resultados_completos_cipo.csv",
               sep = ",",
               check.names = FALSE) %>% 
      as_tibble() %>% 
      mutate(`Metadata 1` = ifelse(`Metadata 1` == "", Sample,
                                   `Metadata 1`),
             `Class (NCBI)` = ifelse(`Class (NCBI)` == "", NA,
                                     `Class (NCBI)`))
    ```

#### Filtragem dos dados (preliminar)

-   Realização da filtragem taxonômica e de qualidade preliminar. Remoção de ASVs com tamanho fora do esperado para os amplicons (entre 120 e 240pb), sequências sem identificação, sequências de grupos taxonômicos diferentes de peixes e sequências encontradas nos controles de filtragem e extração.

    ```{r}
    # Filter for high-confidence ASVs
    pre_filt_raw_results <-
      pre_raw_results_tbl %>%
      filter(`Primer expected length` != "out of range",
             `Final ID (BLASTn)` != "",
             `Class (NCBI)` == "Actinopteri",
             !Sample %in% c("SC_bColA", "SC_bExt_0802"),
             `Contamination status` != "Possible contamination")

    # Save table
    write_csv(pre_filt_raw_results, 
          paste0(tbl_path, "/table-pre_filt_raw_results", "-",
                 Sys.Date(), ".csv", sep = ""))
    ```

#### Análise de dados filtrados

-   Contrução de tabela com os dados removidos da filtragem preliminar.

    ```{r}
    # MSVs filtered from dataset 
    filt_asvs <- 
      dplyr::setdiff(pre_raw_results_tbl,
                 pre_filt_raw_results)

    # Lista em formato longer
    filt_asvs_longer <-
      filt_asvs %>%
      select(Sample,
             `Sample total abundance`,
             `ASV absolute abundance`,
             `Metadata 1`,
             `Curated ID`,
             `Final ID (BLASTn)`,
             ends_with("(NCBI)"),
             `ASV header`,
             `ASV (Sequence)`) %>%
      mutate("Sample abundance" = `Sample total abundance`) %>%
      ungroup() %>%
      group_by(`Final ID (BLASTn)`, Sample) %>%
      mutate("Reads" = sum(`ASV absolute abundance`)) %>%
      ungroup() %>%
      mutate("RRA%" = round(Reads / `Sample total abundance` * 100, 3)) %>%
      ungroup() %>%
      select(`Final ID (BLASTn)`,
             Sample,
             `Metadata 1`,
             Reads,
             `RRA%`,
             `Sample abundance`,
             `Genus (NCBI)`,
             `Family (NCBI)`,
             `Order (NCBI)`,
             `Class (NCBI)`) %>%
    ```

-   Resumo dos dados removidos

    ```{r}
    filt_summ <- 
    filt_asvs_longer %>% 
      group_by(`Metadata 1`) %>% 
      mutate("Sample abundance" = sum(`Reads`)) %>% 
      group_by(`Metadata 1`, `Class (NCBI)`) %>% 
      reframe("Amostra" = `Metadata 1`,
              "Classe" = `Class (NCBI)`,
              "Abundância" = sum(Reads),
              "%" = round(`Abundância` / `Sample abundance` * 100,
                          digits = 3)) %>% 
      unique() %>% 
      pivot_wider(id_cols = Amostra,
                 names_from = Classe,
                 values_from = `%`) %>% 
      relocate("Amostra", 
               "Actinopteri", 
               "Amphibia", 
               "Aves", 
               "Mammalia",
               "Alphaproteobacteria", 
               "Betaproteobacteria", 
               "Terriglobia",
               "NA")
    ```

-   Tile plot dos dados removidos

    ```{r}
    # Define factor levels for plot
    spp_levels <- sort(unique(filt_asvs_longer$`Final ID (BLASTn)`))

    # Plot
    tile_plot_exc <-
    filt_asvs_longer %>%
      mutate(`Final ID (BLASTn)` = factor(`Final ID (BLASTn)`, levels = rev(spp_levels)),
             `Class (NCBI)` = ifelse(`Class (NCBI)` == "", NA, `Class (NCBI)`),
             `Metadata 1` = ifelse(`Metadata 1` == "SC_bColA" | `Metadata 1` == "SC_bExt_0802", "Controles", `Metadata 1`)) %>% 
      ggplot(aes(
        y = `Final ID (BLASTn)`,
        x = Sample,
        fill = `RRA%`
        )) +
      geom_tile() +
      facet_grid(cols = vars(`Metadata 1`),
                 rows = vars(`Class (NCBI)`),
                 space = "free",
                 scales = "free",
                 drop = TRUE) +
      scale_fill_gradientn(
        name = "RRA (%)",
        colours = rev(c("#30123BFF",
                        "#4662D7FF",
                        "darkgreen",
                        "#72FE5EFF",
                        "#C7EF34FF",
                        "#FABA39FF",
                        "#F66B19FF",
                        "#CB2A04FF",
                        "#7A0403FF")),
        values = scales::rescale(c(0, 0.01, 0.05, 0.25, 1, 2.5,
                                   5, 10, 25, 50, 75, 100)),
        breaks = c(0, 0.01, 0.05, 0.25, 1.00, 2.50, 5.00, 10.00,
                   25.00, 50.00, 100.00),
        labels = scales::number_format(accuracy = 0.01),
        limits = c(0.01, 100),
        na.value = "#7A0403FF",
        trans = "log10"
        ) +
        theme(
        panel.grid.major = element_line(color = "grey",
                                        linewidth = 0.2,
                                        linetype = 1),
        axis.text.x = element_text(angle = 45, 
                                   vjust = 1, 
                                   hjust = 1,
                                   size = 14),
        axis.text.y = element_text(face = "italic",
                                   size = 14),
        strip.text.x = element_text(size = 14, 
                                    face = "bold"),
        strip.text.y = element_text(angle = 0,
                                    size = 14, 
                                    face = "bold"),
        legend.position = "right",
        legend.key.height = unit(3, "cm"),
        axis.title.x = element_text(size = 16, 
                                    face = "bold"),  
        axis.title.y = element_text(size = 16, 
                                    face = "bold"),  
        ) +
      labs(fill = "RRA (%)",
           x = "Replicatas",
           y = "Taxa")

    # Salvar figura
    ggsave(plot = tile_plot_exc,
           filename = paste0(figs_path, "/tile_plot_exc", "_",
                             Sys.Date(), ".pdf"),
           units = "cm",
           height = 35,
           width = 40,
           dpi = 1200)
    ```

#### Lista de espécies (preliminar)

-   Lista de espécies que irá ser utilizada para a curadoria.

    ```{r}
    # Lista em formato longer (metadados completos)
    pre_curated_tbl_longer <- 
      pre_filt_raw_results %>%
      select(Sample, 
             `ASV absolute abundance`,
             `Metadata 1`,
             `Curated ID`,
             `Final ID (BLASTn)`,
             ends_with("(NCBI)"), 
             `ASV header`, 
             `ASV (Sequence)`) %>% 
      group_by(Sample) %>% 
      mutate("Sample abundance" = sum(`ASV absolute abundance`)) %>%
      ungroup() %>% 
      group_by(`Final ID (BLASTn)`, Sample) %>% 
      mutate("Reads" = sum(`ASV absolute abundance`)) %>% 
      ungroup() %>% 
      mutate("RRA%" = round(Reads / `Sample abundance` * 100, 2)) %>% 
      ungroup() %>%
      select(`Final ID (BLASTn)`,
             Sample,
             `Metadata 1`,
             Reads,
             `RRA%`,
             `Sample abundance`,
             `Genus (NCBI)`,
             `Family (NCBI)`,
             `Order (NCBI)`) %>% 
      unique()

    pre_curated_tbl_wider <- 
      pre_curated_tbl_longer %>%
      select(`Final ID (BLASTn)`,
             Sample,
             Reads,
             `RRA%`,
             `Sample abundance`) %>%
      group_by(`Final ID (BLASTn)`, Sample) %>%
      pivot_wider(id_cols = `Final ID (BLASTn)`,
                  names_from = Sample,
                  values_from = `RRA%`)

    # Lista em formato longer (metadados simplificados)
    pre_curated_tbl_summ <-
      pre_filt_raw_results %>%
      select(Sample, 
             `ASV absolute abundance`,
             `Metadata 1`,
             `Curated ID`,
             `Final ID (BLASTn)`,
             ends_with("(NCBI)"), 
             `ASV header`, 
             `ASV (Sequence)`) %>% 
      mutate("Total abundance" = sum(`ASV absolute abundance`)) %>%
      ungroup() %>% 
      group_by(`Final ID (BLASTn)`) %>% 
      mutate("Reads" = sum(`ASV absolute abundance`)) %>% 
      ungroup() %>% 
      mutate("RRA%" = round(Reads / `Total abundance` * 100, 3)) %>% 
      ungroup() %>%
      select(`Final ID (BLASTn)`,
             Reads,
             `RRA%`,
             `Total abundance`,
             `Genus (NCBI)`,
             `Family (NCBI)`,
             `Order (NCBI)`) %>% 
      unique()
       
    ```

-   Resumo dos dados filtrados

    ```{r}
    pre_curated_tbl_summ <- 
    pre_filt_raw_results %>%
      select(Sample, 
             `ASV absolute abundance`,
             `Metadata 1`,
             `Curated ID`,
             `Final ID (BLASTn)`,
             ends_with("(NCBI)"), 
             `ASV header`, 
             `ASV (Sequence)`) %>% 
      group_by(`Metadata 1`) %>% 
      mutate("Sample abundance" = sum(`ASV absolute abundance`)) %>%
      ungroup() %>% 
      group_by(`Final ID (BLASTn)`, `Metadata 1`) %>% 
      mutate("Reads" = sum(`ASV absolute abundance`)) %>% 
      ungroup() %>% 
      mutate("RRA%" = round(Reads / `Sample abundance` * 100, 2)) %>% 
      ungroup() %>% 
      reframe("Amostra" = `Metadata 1`,
              "Taxa" = `Final ID (BLASTn)`,
              "Abundância" = Reads,
              "%" = `RRA%`) %>% 
      unique() %>% 
      pivot_wider(id_cols = Taxa,
                 names_from = Amostra,
                 values_from = `%`)

    ordens <- pre_filt_raw_results %>% 
      reframe("Taxa" = `Final ID (BLASTn)`,
             "Ordem" = `Order (NCBI)`) %>% 
      unique()

    pre_species_list <- 
      pre_curated_tbl_summ %>% 
      left_join(ordens,
                by = "Taxa") %>% 
      relocate(Ordem,
               Taxa)
    ```

#### Tile Plot da lista de espécies preliminar

```{{r}}
# Define factor levels for plot
spp_levels <- sort(unique(pre_curated_tbl_longer$`Final ID (BLASTn)`))

# Plot
tile_plot_filt <-
pre_curated_tbl_longer %>%
  mutate(`Final ID (BLASTn)` = factor(`Final ID (BLASTn)`, levels = rev(spp_levels))) %>%  
  ggplot(aes(
    y = `Final ID (BLASTn)`,
    x = Sample,
    fill = `RRA%`
    )) +
  geom_tile() +
  facet_grid(cols = vars(`Metadata 1`),
             rows = vars(`Family (NCBI)`),
             space = "free",
             scales = "free",
             drop = TRUE) +
  scale_fill_gradientn(
    name = "RRA (%)",
    colours = rev(c("#30123BFF",
                    "#4662D7FF",
                    "darkgreen",
                    "#72FE5EFF",
                    "#C7EF34FF",
                    "#FABA39FF",
                    "#F66B19FF",
                    "#CB2A04FF",
                    "#7A0403FF")),
    values = scales::rescale(c(0, 0.01, 0.05, 0.25, 1, 2.5,
                               5, 10, 25, 50, 75, 100)),
    breaks = c(0, 0.01, 0.05, 0.25, 1.00, 2.50, 5.00, 10.00,
               25.00, 50.00, 100.00),
    labels = scales::number_format(accuracy = 0.01),
    limits = c(0.01, 100),
    na.value = "#7A0403FF",
    trans = "log10"
    ) +
  theme(
    panel.grid.major = element_line(color = "grey",
                                    linewidth = 0.2,
                                    linetype = 1),
    axis.text.x = element_text(angle = 45, 
                               vjust = 1, 
                               hjust = 1,
                               size = 14),
    axis.text.y = element_text(face = "italic",
                               size = 14),
    strip.text.x = element_text(size = 14, 
                                face = "bold"),
    strip.text.y = element_text(angle = 0,
                                size = 14, 
                                face = "bold"),
    legend.position = "right",
    legend.key.height = unit(3, "cm"),
    axis.title.x = element_text(size = 16, 
                                face = "bold"),  
    axis.title.y = element_text(size = 16, 
                                face = "bold"),  
    ) +
  labs(fill = "RRA (%)",
       x = "Replicatas",
       y = "Taxa")

# Salvar figura
ggsave(plot = tile_plot_filt,
       filename = paste0(figs_path, "/tile_plot_filt", "_",
                         Sys.Date(), ".pdf"),
       units = "cm",
       height = 35,
       width = 35,
       dpi = 1200)
```

#### Resumos dos dados brutos

-   Quantificação de paired-end reads geradas amostra no sequenciamento.

    ```{r}
    seq_read_counts <- 
      read.csv("/home/isav/projetos/tcc_eDNA_cipo/data/reads_n_seq_counts_eDNA_cipo.csv",
               sep = ",",
               check.names = FALSE) %>%
      as_tibble() %>% 
      summarise("Total reads" = sum(`Raw reads (pairs)`)) %>% 
      print()
    ```

-   Quantificação de reads que sobreviveram ao pipeline.

    ```{r}
    # Summarize unfiltered (raw) dataset for exploratory assessment
    raw_resume <-
      pre_raw_results_tbl %>% 
      reframe("Total reads" = sum(`ASV absolute abundance`),
              "ASVs" = length(unique(`ASV header`))
              ) %>% 
      unique() %>% 
      print()
    ```

-   Quantificação de reads por amostra que sobreviveram ao pipeline.

    ```{r}
    raw_resume_sample <-
      pre_raw_results_tbl  %>%
      group_by(`Metadata 1`) %>% 
      mutate("Sample abundance" = sum(`ASV absolute abundance`)) %>%
      ungroup() %>% 
      group_by(Sample) %>% 
      mutate("Reads" = sum(`ASV absolute abundance`)) %>% 
      ungroup() %>% 
      mutate("RRA%" = round(Reads / `Sample abundance` * 100, 2)) %>%
      group_by(Sample) %>%
      mutate("Reads totais" = sum(`ASV absolute abundance`)) %>%
      ungroup() %>% 
      group_by(Sample) %>%
      reframe("Site" = `Metadata 1`,
              "Total reads" = `Reads totais`,
              "RRA%" = `RRA%`,
              "ASVs" = length(unique(`ASV header`)),
              # "OTUs" = length(unique(OTU)),
              # "Class" = `Class (NCBI)`,
              # "Order" = `Order (NCBI)`,
              # "Family" = `Family (NCBI)`,
              # "Genus" = `Genus (NCBI)`,
              # "Final ID (BLASTn)" = `Final ID (BLASTn)`
              ) %>%
      relocate(Site,
               Sample) %>% 
      unique() %>% 
      print()
    ```

-   Quantificação de reads que sobreviveram à filtragem preliminar.

    ```{r}
    raw_resume_filt <- 
      pre_filt_raw_results %>% 
      reframe("Total reads" = sum(`ASV absolute abundance`),
              "ASVs" = length(unique(`ASV header`))
              ) %>% 
      unique() %>% 
      print()
    ```

-   Quantificação de reads por amostra que sobreviveram à filtragem preliminar.

    ```{r}
    raw_resume_sample <-
      pre_filt_raw_results  %>%
      group_by(`Metadata 1`) %>% 
      mutate("Sample abundance" = sum(`ASV absolute abundance`)) %>%
      ungroup() %>% 
      group_by(Sample) %>% 
      mutate("Reads" = sum(`ASV absolute abundance`)) %>% 
      ungroup() %>% 
      mutate("RRA%" = round(Reads / `Sample abundance` * 100, 2)) %>%
      group_by(Sample) %>%
      mutate("Reads totais" = sum(`ASV absolute abundance`)) %>%
      ungroup() %>% 
      group_by(Sample) %>%
      reframe("Site" = `Metadata 1`,
              "Total reads" = `Reads totais`,
              "RRA%" = `RRA%`,
              "ASVs" = length(unique(`ASV header`)),
              # "OTUs" = length(unique(OTU)),
              # "Class" = `Class (NCBI)`,
              # "Order" = `Order (NCBI)`,
              # "Family" = `Family (NCBI)`,
              # "Genus" = `Genus (NCBI)`,
              # "Final ID (BLASTn)" = `Final ID (BLASTn)`
              ) %>%
      relocate(Site,
               Sample) %>% 
      unique() %>% 
      print()
    ```

### Análise Pós-Curadoria

-   Visualização dos dados e análises ecológicas após a curadoria integrativa das ASVs.

    ```{r}
    # resultados pos-curadoria
    curated_results_tbl <- 
      read.csv("/home/isav/projetos/tcc_eDNA_cipo/data/resultados_completos-eDNA_Cipo-091025.csv",
               sep = ",",
               check.names = FALSE) %>% 
      mutate(`Metadata 1` = ifelse(`Metadata 1` == "", Sample,
                                   `Metadata 1`),
             `Class (NCBI)` = ifelse(`Class (NCBI)` == "", NA,
                                     `Class (NCBI)`))
    ```

#### Filtragem dos dados (pós-curadoria)

-   Realização da filtragem taxonômica e de qualidade pós-curadoria. Remoção de ASVs com tamanho fora do esperado para os amplicons (entre 120 e 240pb), sequências sem identificação, sequências de grupos taxonômicos diferentes de peixes e sequências encontradas nos controles de filtragem e extração.

    ```{r}
    # Filter for high-confidence ASVs
    filt_curated_results <-
      curated_results_tbl %>%
      filter(`Primer expected length` != "out of range",
             `Final ID (BLASTn)` != "",
             `Class (NCBI)` == "Actinopteri",
             !Sample %in% c("SC_bColA", "SC_bExt_0802"),
             `Contamination status` != "Possible contamination",
             `Metadata 7` != "remover")

    # Save table
    write_csv(filt_curated_results, 
          paste0(tbl_path, "/table-filt_curated_results", "-",
                 Sys.Date(), ".csv", sep = ""))

    ```

#### Análise de dados filtrados

-   Contrução de tabela com os dados removidos da filtragem.

    ```{r}
    # ASVs filtradas do dataset 
    filt_asvs_refined <- 
      dplyr::setdiff(curated_results_tbl,
                 filt_curated_results)

    # Lista em formato longer
    filt_asvs_refined_longer <-
      filt_asvs_refined %>%
      select(Sample,
             `Sample total abundance`,
             `ASV absolute abundance`,
             `Metadata 1`,
             `Curated ID`,
             `Final ID (BLASTn)`,
             ends_with("(NCBI)"),
             `ASV header`,
             `ASV (Sequence)`) %>%
      mutate("Sample abundance" = `Sample total abundance`) %>%
      ungroup() %>%
      group_by(`Final ID (BLASTn)`, Sample) %>%
      mutate("Reads" = sum(`ASV absolute abundance`)) %>%
      ungroup() %>%
      mutate("RRA%" = round(Reads / `Sample total abundance` * 100, 3)) %>%
      ungroup() %>%
      select(`Final ID (BLASTn)`,
             Sample,
             `Metadata 1`,
             Reads,
             `RRA%`,
             `Sample abundance`,
             `Genus (NCBI)`,
             `Family (NCBI)`,
             `Order (NCBI)`,
             `Class (NCBI)`) %>%
      unique()



    ```

-   Resumo dos dados removidos

    ```{r}
    # filt_summ_refined_1 <- 
    filt_summ_refined <- 
    filt_asvs_refined_longer %>% 
      group_by(`Metadata 1`) %>% 
      mutate("Sample abundance" = sum(`Sample abundance`)) %>% 
      group_by(`Metadata 1`, `Class (NCBI)`) %>% 
      reframe("Abundancia total" = `Sample abundance`,
              "Amostra" = `Metadata 1`,
              "Classe" = `Class (NCBI)`,
              "Abundância" = sum(Reads),
              "%" = round(`Abundância` / `Sample abundance` * 100,
                          digits = 3)) %>%
              # "%" = round(sum(`RRA%`),
              #             digits = 3)) %>%
      unique() %>%
      pivot_wider(id_cols = Amostra,
                 names_from = Classe,
                 values_from = `%`) %>% 
      relocate("Amostra", 
               "Actinopteri", 
               "Amphibia", 
               "Aves", 
               "Mammalia",
               "Alphaproteobacteria", 
               "Betaproteobacteria", 
               "Terriglobia",
               "NA")
    ```

-   Tile plot dos dados removidos

    ```{r}
    # Define factor levels for plot
    spp_levels <- sort(unique(filt_asvs_longer$`Final ID (BLASTn)`))

    # Plot
    tile_plot_exc <-
    filt_asvs_longer %>%
      mutate(`Final ID (BLASTn)` = factor(`Final ID (BLASTn)`, levels = rev(spp_levels)),
             `Class (NCBI)` = ifelse(`Class (NCBI)` == "", NA, `Class (NCBI)`),
             `Metadata 1` = ifelse(`Metadata 1` == "SC_bColA" | `Metadata 1` == "SC_bExt_0802", "Controles", `Metadata 1`)) %>% 
      ggplot(aes(
        y = `Final ID (BLASTn)`,
        x = Sample,
        fill = `RRA%`
        )) +
      geom_tile() +
      facet_grid(cols = vars(`Metadata 1`),
                 rows = vars(`Class (NCBI)`),
                 space = "free",
                 scales = "free",
                 drop = TRUE) +
      scale_fill_gradientn(
        name = "RRA (%)",
        colours = rev(c("#30123BFF",
                        "#4662D7FF",
                        "darkgreen",
                        "#72FE5EFF",
                        "#C7EF34FF",
                        "#FABA39FF",
                        "#F66B19FF",
                        "#CB2A04FF",
                        "#7A0403FF")),
        values = scales::rescale(c(0, 0.01, 0.05, 0.25, 1, 2.5,
                                   5, 10, 25, 50, 75, 100)),
        breaks = c(0, 0.01, 0.05, 0.25, 1.00, 2.50, 5.00, 10.00,
                   25.00, 50.00, 100.00),
        labels = scales::number_format(accuracy = 0.01),
        limits = c(0.01, 100),
        na.value = "#7A0403FF",
        trans = "log10"
        ) +
        theme(
        panel.grid.major = element_line(color = "grey",
                                        linewidth = 0.2,
                                        linetype = 1),
        axis.text.x = element_text(angle = 45, 
                                   vjust = 1, 
                                   hjust = 1,
                                   size = 14),
        axis.text.y = element_text(face = "italic",
                                   size = 14),
        strip.text.x = element_text(size = 14, 
                                    face = "bold"),
        strip.text.y = element_text(angle = 0,
                                    size = 14, 
                                    face = "bold"),
        legend.position = "right",
        legend.key.height = unit(3, "cm"),
        axis.title.x = element_text(size = 16, 
                                    face = "bold"),  
        axis.title.y = element_text(size = 16, 
                                    face = "bold"),  
        ) +
      labs(fill = "RRA (%)",
           x = "Replicatas",
           y = "Taxa")

    # Salvar figura
    ggsave(plot = tile_plot_exc,
           filename = paste0(figs_path, "/tile_plot_exc", "_",
                             Sys.Date(), ".pdf"),
           units = "cm",
           height = 35,
           width = 40,
           dpi = 1200)
    ```

#### Lista de espécies

-   Lista de espécies que irá ser utilizada para a curadoria.

    ```{r}
    # Lista em formato longer (metadados completos)
    pre_curated_tbl_longer <- 
      pre_filt_raw_results %>%
      select(Sample, 
             `ASV absolute abundance`,
             `Metadata 1`,
             `Curated ID`,
             `Final ID (BLASTn)`,
             ends_with("(NCBI)"), 
             `ASV header`, 
             `ASV (Sequence)`) %>% 
      group_by(Sample) %>% 
      mutate("Sample abundance" = sum(`ASV absolute abundance`)) %>%
      ungroup() %>% 
      group_by(`Final ID (BLASTn)`, Sample) %>% 
      mutate("Reads" = sum(`ASV absolute abundance`)) %>% 
      ungroup() %>% 
      mutate("RRA%" = round(Reads / `Sample abundance` * 100, 2)) %>% 
      ungroup() %>%
      select(`Final ID (BLASTn)`,
             Sample,
             `Metadata 1`,
             Reads,
             `RRA%`,
             `Sample abundance`,
             `Genus (NCBI)`,
             `Family (NCBI)`,
             `Order (NCBI)`) %>% 
      unique()

    pre_curated_tbl_wider <- 
      pre_curated_tbl_longer %>%
      select(`Final ID (BLASTn)`,
             Sample,
             Reads,
             `RRA%`,
             `Sample abundance`) %>%
      group_by(`Final ID (BLASTn)`, Sample) %>%
      pivot_wider(id_cols = `Final ID (BLASTn)`,
                  names_from = Sample,
                  values_from = `RRA%`)

    # Lista em formato longer (metadados simplificados)
    pre_curated_tbl_summ <-
      pre_filt_raw_results %>%
      select(Sample, 
             `ASV absolute abundance`,
             `Metadata 1`,
             `Curated ID`,
             `Final ID (BLASTn)`,
             ends_with("(NCBI)"), 
             `ASV header`, 
             `ASV (Sequence)`) %>% 
      mutate("Total abundance" = sum(`ASV absolute abundance`)) %>%
      ungroup() %>% 
      group_by(`Final ID (BLASTn)`) %>% 
      mutate("Reads" = sum(`ASV absolute abundance`)) %>% 
      ungroup() %>% 
      mutate("RRA%" = round(Reads / `Total abundance` * 100, 3)) %>% 
      ungroup() %>%
      select(`Final ID (BLASTn)`,
             Reads,
             `RRA%`,
             `Total abundance`,
             `Genus (NCBI)`,
             `Family (NCBI)`,
             `Order (NCBI)`) %>% 
      unique()
       
    ```

-   Resumo dos dados filtrados

    ```{r}
    pre_curated_tbl_summ <- 
    pre_filt_raw_results %>%
      select(Sample, 
             `ASV absolute abundance`,
             `Metadata 1`,
             `Curated ID`,
             `Final ID (BLASTn)`,
             ends_with("(NCBI)"), 
             `ASV header`, 
             `ASV (Sequence)`) %>% 
      group_by(`Metadata 1`) %>% 
      mutate("Sample abundance" = sum(`ASV absolute abundance`)) %>%
      ungroup() %>% 
      group_by(`Final ID (BLASTn)`, `Metadata 1`) %>% 
      mutate("Reads" = sum(`ASV absolute abundance`)) %>% 
      ungroup() %>% 
      mutate("RRA%" = round(Reads / `Sample abundance` * 100, 2)) %>% 
      ungroup() %>% 
      reframe("Amostra" = `Metadata 1`,
              "Taxa" = `Final ID (BLASTn)`,
              "Abundância" = Reads,
              "%" = `RRA%`) %>% 
      unique() %>% 
      pivot_wider(id_cols = Taxa,
                 names_from = Amostra,
                 values_from = `%`)

    ordens <- pre_filt_raw_results %>% 
      reframe("Taxa" = `Final ID (BLASTn)`,
             "Ordem" = `Order (NCBI)`) %>% 
      unique()

    pre_species_list <- 
      pre_curated_tbl_summ %>% 
      left_join(ordens,
                by = "Taxa") %>% 
      relocate(Ordem,
               Taxa)
    ```

#### Tile Plot

```{{r}}
# Define factor levels for plot
spp_levels <- sort(unique(pre_curated_tbl_longer$`Final ID (BLASTn)`))

# Plot
tile_plot_filt <-
pre_curated_tbl_longer %>%
  mutate(`Final ID (BLASTn)` = factor(`Final ID (BLASTn)`, levels = rev(spp_levels))) %>%  
  ggplot(aes(
    y = `Final ID (BLASTn)`,
    x = Sample,
    fill = `RRA%`
    )) +
  geom_tile() +
  facet_grid(cols = vars(`Metadata 1`),
             rows = vars(`Family (NCBI)`),
             space = "free",
             scales = "free",
             drop = TRUE) +
  scale_fill_gradientn(
    name = "RRA (%)",
    colours = rev(c("#30123BFF",
                    "#4662D7FF",
                    "darkgreen",
                    "#72FE5EFF",
                    "#C7EF34FF",
                    "#FABA39FF",
                    "#F66B19FF",
                    "#CB2A04FF",
                    "#7A0403FF")),
    values = scales::rescale(c(0, 0.01, 0.05, 0.25, 1, 2.5,
                               5, 10, 25, 50, 75, 100)),
    breaks = c(0, 0.01, 0.05, 0.25, 1.00, 2.50, 5.00, 10.00,
               25.00, 50.00, 100.00),
    labels = scales::number_format(accuracy = 0.01),
    limits = c(0.01, 100),
    na.value = "#7A0403FF",
    trans = "log10"
    ) +
  theme(
    panel.grid.major = element_line(color = "grey",
                                    linewidth = 0.2,
                                    linetype = 1),
    axis.text.x = element_text(angle = 45, 
                               vjust = 1, 
                               hjust = 1,
                               size = 14),
    axis.text.y = element_text(face = "italic",
                               size = 14),
    strip.text.x = element_text(size = 14, 
                                face = "bold"),
    strip.text.y = element_text(angle = 0,
                                size = 14, 
                                face = "bold"),
    legend.position = "right",
    legend.key.height = unit(3, "cm"),
    axis.title.x = element_text(size = 16, 
                                face = "bold"),  
    axis.title.y = element_text(size = 16, 
                                face = "bold"),  
    ) +
  labs(fill = "RRA (%)",
       x = "Replicatas",
       y = "Taxa")

# Salvar figura
ggsave(plot = tile_plot_filt,
       filename = paste0(figs_path, "/tile_plot_filt", "_",
                         Sys.Date(), ".pdf"),
       units = "cm",
       height = 35,
       width = 35,
       dpi = 1200)
```
