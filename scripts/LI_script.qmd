---
title: "LI paper scripts"
format: html
editor: visual
author: 
  - "Mendes, GA"
date: "`r format(Sys.time(), '%d %B, %Y')`"
editor_options: 
  chunk_output_type: console
---

This pipeline integrates public tools available for metabarcoding analyses. To share or reproduce this content, please require authors' consent.**\
**Contact: [gabrielmendesbrt\@gmail.com](mailto:gabrielmendesbrt@gmail.com){.email}

# Bioinformatics

## Housekeeping

-   Load project environment and necessary libraries

    ```{r}
    # load(file = "/home/gabriel/projetos/LI_paper/Environments/...RData")

    # Loading libraries ----

    { library("tidyverse")
      library("Biostrings")
      library("DECIPHER")
      library("phyloseq")
      library("vegan")
      library("readxl")
      library("ggpubr")
      library("ggplot2")
      library("ggsignif")
      library("ggrepel")
      library("openxlsx")
      library("colorspace")
      }
    ```

-   Create project folders

    ```{r}
    # Creating and loading paths ----
    {
      prjct_path <- "/home/gabriel/projetos/LI_paper"
      prjct_radical <- "eDNA_Lagoa-dos-Ingleses"
      scripts_path <- paste0(prjct_path,"/scripts")
      results_path <- paste0(prjct_path,"/results")
      figs_path <- paste0(results_path,"/figures")
      tbl_path <- paste0(results_path,"/tables")
      env_path <- paste0(prjct_path,"/environment")
      paths <- c(scripts_path, results_path, figs_path, tbl_path, env_path)
    }

    for (dir in paths) {
      if (dir.exists(dir)) {
        print(paste("The directory", dir, "already exists!"))
      } else {
        print(paste("Making", dir, "!" ))
        dir.create(dir) 
      }
    }
    ```

-   Data acquring

    ```{r}
    pre_raw_results_tbl <- read_excel("/home/gabriel/projetos/lagoa_ingleses/tabelas/curated/curated-Complete_analysis_results-2024-01-10.xlsx") %>% tibble()
    curated_ids_tbl <- read_excel("/home/gabriel/projetos/lagoa_ingleses/tabelas/curated/curated_lagoa_ingleses-ASVs_x_amostras-2024-01-09.xlsx") %>% tibble()
    blast_tax <- read.csv("/home/gabriel/projetos/lagoa_ingleses/tabelas/raw/tax_blast.csv", sep = ",", check.names = FALSE)
    ```

## Integrating raw and curated data

### Obtaining data

-   Selecting colunms and adjusting the raw data table

    ```{r}
    pre_raw_results_tbl <-
      pre_raw_results_tbl %>%
      select("Sample", "Unique_File_name", "OTU", 
             "Abundance", "Obs. Curadoria", 
             "Possible contamination", "Read origin", 
             "Primer expected length", "ASV Size (pb)", 
             "ASV header") %>%
      mutate(Sample = str_replace(Sample, "__", "_"))
    ```

<!-- -->

-   Selecting colunms from curated identifications table

    ```{r}
    curated_ids_tbl <- # Curated identifications df
      curated_ids_tbl %>%
      select("ASV header", "ASV (Sequence)", "Curated ID",
             "Final ID (BLASTn)", "BLASTn pseudo-score",
             "Class (BLASTn)", "Curated Order (BLASTn)") %>%
      unique()
    ```

### Data integration and Taxonomic Enrichment

-   Joining the results table with curated identifications

    ```{r}
    raw_results_tbl <- 
      pre_raw_results_tbl %>%
      left_join(curated_ids_tbl, by = "ASV header") %>%
      select("ASV header","ASV (Sequence)", "Curated ID", 
             "Final ID (BLASTn)","BLASTn pseudo-score", 
             "Class (BLASTn)", "Curated Order (BLASTn)",
             "Sample", "Unique_File_name", "OTU", "Abundance", 
             "Obs. Curadoria","Read origin", 
             "Primer expected length", "ASV Size (pb)")
    ```

-   Adding complete taxonomy from BLASTr output

    ```{r}
    # Prepare the BLAST taxonomy table
    blast_tax_less <- 
      blast_tax[2:85] %>%
      select(ASV,`Family (BLASTn)`) %>% 
      rename(`ASV (Sequence)` = "ASV") %>%
      left_join(raw_results_tbl, by = "ASV (Sequence)") %>% 
      mutate("Genus (BLASTn)" = 
               str_split_fixed(string = .$`Curated ID`, 
                               pattern = " ", n = 2)[,1]) %>% 
      select("ASV (Sequence)", 
             "Family (BLASTn)", 
             "Genus (BLASTn)")

    # Join the taxonomy to the main table
    raw_results_tax_tbl <- raw_results_tbl %>%
      left_join(blast_tax_less, 
                by = "ASV (Sequence)") %>% 
      select("ASV header", "ASV (Sequence)", "Curated ID", 
             "Final ID (BLASTn)", "BLASTn pseudo-score", 
             "Class (BLASTn)", "Family (BLASTn)", 
             "Genus (BLASTn)", "Curated Order (BLASTn)", 
             "Sample", "Unique_File_name", "OTU", 
             "Abundance", "Obs. Curadoria", "Read origin", 
             "Primer expected length", "ASV Size (pb)") %>% 
      unique() %>% 
      rename("Order (BLASTn)" = "Curated Order (BLASTn)")
    ```

### Metadata integration

Finally, we create a metadata table containing information about each sample (such as location, date, and filter type) and join it with the sequencing data. This information was not included in the initial bioinformatics metabarcoding pipeline input, so it's being explicitly incorporated at this stage.

-   Creating the metadata dataframe

    ```{r}
    # Vectors with information for each sample
    Sample <- c("L1_nov_dec_20_mi", "L2_nov20", "L2_dez20",
                "L1_out21", "L2_out21", "L3_out21", "L4_out21",
                "L1_nov21", "L2_nov21", "L3_nov21", "L4_nov21",
                "STX_L1_nov21", "STX_L2_nov21", "STX_L3_nov21",
                "STX_L4_nov21", "L1_jan22", "L2_jan22",
                "L3_jan22", "L4_jan22")

    Expedition <- c("November and December 2020", 
                    "November 2020", "December 2020", 
                    "October 2021", "October 2021", 
                    "October 2021", "October 2021", 
                    "November 2021", "November 2021", 
                    "November 2021", "November 2021", 
                    "November 2021", "November 2021", 
                    "November 2021", "November 2021", 
                    "January 2022", "January 2022", 
                    "January 2022", "January 2022")

    Year <- c("2020", "2020", "2020", "2021", "2021", "2021",
              "2021", "2021", "2021", "2021", "2021", "2021",
              "2021", "2021", "2021", "2022", "2022", "2022",
              "2022")

    Site <- c("P1", "P2", "P2", "P3", "P4", "P2", "P1", "P3",
              "P4", "P2", "P1", "P3", "P4", "P2", "P1", "P3",
              "P4", "P2", "P1")

    Filter <- c("MCE", "MCE", "MCE", "MCE", "MCE", "MCE", 
                "MCE", "MCE", "MCE", "MCE", "MCE", "Sterivex",
                "Sterivex", "Sterivex", "Sterivex", "MCE", 
                "MCE", "MCE", "MCE")

    Run <- c("Run2_ago21", "Run4_out21", "Run4_out21", 
             "Run5_dez21", "Run5_dez21", "Run5_dez21",
             "Run5_dez21", "Run5_dez21", "Run5_dez21",
             "Run5_dez21", "Run5_dez21", "EM156", "EM156",
             "EM156", "EM156", "EM156", "EM156", "EM156", 
             "EM156")

    Level <- c("High", "High", "High", "Low", "Low", "Low", 
               "Low", "Low", "Low", "Low", "Low", "Low", 
               "Low", "Low", "Low", "High", "High", "High",
               "High")

    # Combine vectors into a tibble
    metadata_tbl <- 
      tibble(Run, Sample, Filter, Site, Expedition, Year, Level)
    ```

-   Joining data with metadata

    ```{r}
    raw_results_full_tbl <- 
      left_join(raw_results_tax_tbl,
                metadata_tbl,
                by = "Sample") %>%
      select("ASV header", "ASV (Sequence)", "Curated ID",
             "Obs. Curadoria", "Final ID (BLASTn)",
             "BLASTn pseudo-score", "Class (BLASTn)",
             "Family (BLASTn)","Genus (BLASTn)",
             "Order (BLASTn)", "Sample", "Unique_File_name",
             "OTU", "Abundance", "Read origin",
             "Primer expected length", "ASV Size (pb)",
             "Run", "Filter", "Site", "Expedition", "Year",
             "Level")
    ```

### Manual corrections

-   Correcting taxonomic identifications after curation

    ```{r}
    # Update families for specific genera (february 10th 2025)
    raw_results_full_tbl <- 
      raw_results_full_tbl %>% 
      mutate(`Family (BLASTn)` = 
               ifelse(`Genus (BLASTn)` %in% c("Psalidodon",
                                              "Moenkhausia",
                                              "Astyanax",
                                              "Hemigrammus",
                                              "Oligosarcus"),
                      "Acestrorhamphidae",
                      `Family (BLASTn)`)) %>%
      mutate(`Family (BLASTn)` = 
               ifelse(`Genus (BLASTn)` %in% "Piabina",
                      "Stevardiidae",
                      `Family (BLASTn)`))

    # Group Hoplias species (february 25th 2025)
    raw_results_full_tbl <- raw_results_full_tbl %>%
      mutate(`Curated ID` =
               ifelse(`Curated ID` %in% c("Hoplias malabaricus",
                                          "Hoplias intermedius"),
                      "Hoplias sp.", 
                      `Curated ID`))
    ```

### Data filtering

-   We remove reads outside the expected size range, NA identifications, potential contaminants from birds and mammals with low scores, and data from negative controls. Only data generated with MCE filter are used for downstream analyses.

    ```{r}
    curated_full_tbl <-
    curated_full_tbl_2 <-
      raw_results_full_tbl %>%
      filter(Filter == "MCE",
             `Primer expected length` != "out of range",
             !is.na(`Curated ID`),
             !(`Class (BLASTn)` %in% c("Mammalia", "Aves") &
                 `BLASTn pseudo-score` < 98),
             !Sample %in% c("EM113_NEGPCR1", "EM135c4c5_NEGPCR1",
                            "EM135c4c5_NEGPCR2","EM149_NEGPCR1",
                            "EM149_NEGPCR2", "EM156_NegPCR1",
                            "S724_NEGPCR1", "br_jan_22", 
                            "br_nov21"),
             `Obs. Curadoria` != "Possible contamination")
    ```

#### Analysis of removed data

```{r}
# All MCE ASVs filtered from dataset 
filt_asvs <- 
  setdiff(raw_results_full_tbl,
          curated_full_tbl_2) %>%
  filter(!(Filter) %in% "Sterivex") %>% 
  mutate(`Curated ID` = ifelse(`Curated ID` == "NA", NA,
                               `Curated ID`))

# Infos about classes of ASVs filtered
filt_stats_class <- 
  filt_asvs %>%
  group_by(`Class (BLASTn)`) %>%
  reframe("Total reads" = sum(Abundance),
          "ASVs" = length(unique(`ASV (Sequence)`)),
          "OTUs" = length(unique(OTU)),
          "Families" = length(unique(`Family (BLASTn)`)))

# Infos about fish ASVs filtered
filt_stats_fish <- 
  filt_asvs %>%
  filter(`Class (BLASTn)` == "Actinopteri") %>% 
  group_by(`Curated ID`) %>%
  reframe("Total reads" = sum(Abundance),
          "ASVs" = length(unique(`ASV (Sequence)`)),
          "OTUs" = length(unique(OTU)),
          "Families" = length(unique(`Family (BLASTn)`)))

# Infos about samples filtered from dataset
filt_stats_sample <-
  filt_asvs %>% 
  group_by(Sample) %>% 
  reframe("Total reads" = sum(Abundance),
          "ASVs" = length(unique(`ASV (Sequence)`)),
          "OTUs" = length(unique(OTU)),
          "Families" = length(unique(`Family (BLASTn)`)))

# Infos about Curated IDs filtered from dataset
options(scipen = 999)
filt_stats_IDs_all <-
  filt_asvs %>%
  group_by(`Curated ID`, `Final ID (BLASTn)`) %>% 
  summarise("Family" =`Family (BLASTn)`,
            "Reads" = sum(Abundance),
            "Class" = paste(unique(`Class (BLASTn)`), 
                            collapse = ", "),
            "Samples" = paste(unique(Sample), 
                            collapse = ", "),
            "Reasons" = paste(unique(c(
              if (any(is.na(`Curated ID`))) "ID is NA",
              if (any(`Obs. Curadoria` %in%
                      "Possible contamination"))
                "Contamination",
              if (any(`Primer expected length` %in%
                      "out of range"))
                "Out of range",
              if (any((`Class (BLASTn)` != "Actinopteri" &
                       !is.na(`Class (BLASTn)`)))) 
                paste("Class:", `Class (BLASTn)`), 
              if (any(str_detect(Sample, "PCR")))
                "PCR control",
              if (any(str_detect(Sample, "^br_")))
                "Extraction control" )),
              collapse = ", ")) %>%
  ungroup() %>% 
  select(`Curated ID`, 
         `Final ID (BLASTn)`,
         Reads,
         Samples,
         Reasons,
         Class,
         Family) %>% 
  arrange(desc(Reads)) %>% 
  unique()
```

#### Table S4

**Table of removed taxonomic identifications.** Each row corresponds to one taxon in a given sample and summarizes the information that led to its exclusion from the final dataset. Columns include the taxonomic class (Class), family (Family), taxon name (Taxa), number of reads (Reads), relative read abundance (% RRA), and the sample of origin (Sample). Since different ASVs can be grouped under the same taxon within a sample, the 'Reason' column specifies why that taxon was removed (e.g., detected in controls – Contamination or PCR control/Filtration control; amplicon length outside the expected range – Out of range; unidentified ASVs – ID is NA; or belonging to a non-Actinopterygii class such as Mammalia or Aves).

```{r}
# Infos about IDs and samples

    # Retriving total sample abundances
    sample_abd <- 
      raw_results_full_tbl %>%
      filter(!(Filter) %in% "Sterivex") %>% 
      group_by(Sample) %>%
      summarize(total_abundance = sum(Abundance, na.rm = TRUE))

    filt_stats_IDs_samples <-
      filt_asvs %>%
      group_by(`Curated ID`, `Final ID (BLASTn)`, Sample) %>% 
      summarise("Family" =`Family (BLASTn)`,
              "Reads" = sum(Abundance),
              "Class" = paste(unique(`Class (BLASTn)`),
                              collapse = ", "),
              "Reasons" = paste(unique(c(
                if (any(is.na(`Curated ID`))) "ID is NA",
                if (any(`Obs. Curadoria` %in%
                        "Possible contamination")) 
                  "Contamination",
                if (any(`Primer expected length` %in%
                        "out of range"))
                  "Out of range",
                if (any((`Class (BLASTn)` != "Actinopteri" &
                     !is.na(`Class (BLASTn)`))))
                  paste("Class:", `Class (BLASTn)`),
                if (any(str_detect(Sample, "PCR")))
                  "PCR control",
                if (any(str_detect(Sample, "^br_")))
                  "Extraction control" )), 
                collapse = ", ")) %>%
      ungroup() %>% 
      left_join(sample_abd, by = "Sample") %>% 
      mutate("RRA %" = round(Reads / 
                               total_abundance * 100,
                             digits = 3)) %>% 
      select(`Curated ID`, 
             `Final ID (BLASTn)`,
             Reads,
             `RRA %`, 
             Sample,
             Reasons,
             Class,
             Family) %>% 
      arrange(desc(`RRA %`)) %>% 
      unique()
```

#### Figure S2

**Tile plot of removed sequences.** The plot illustrates the taxonomic composition of sequences removed during the filtering process. The X-axis represents samples, grouped by category (filtration control, PCR control, and environmental sample), and the Y-axis shows the taxonomic identifications of sequences excluded from the final dataset. Sequences detected in controls were discarded, as well as those not meeting quality or taxonomic filtering criteria (e.g., unidentified, out-of-range amplicon length, non-Actinopterygii, or potential contaminations).

```{r}
# Sample levels for plot 
    sample_levels <- c("br_nov21", "br_jan_22",  
                       "EM135c4c5_NEGPCR1", 
                       "EM135c4c5_NEGPCR2", 
                       "EM149_NEGPCR1", 
                       "EM149_NEGPCR2", 
                       "EM113_NEGPCR1",
                       "EM156_NegPCR1",
                       "S724_NEGPCR1",
                       "L1_nov_dec_20_mi",
                       "L2_nov20",
                       "L2_dez20",
                       "L1_out21",
                       "L2_out21",
                       "L3_out21",
                       "L1_nov21",
                       "L2_nov21",
                       "L3_nov21",
                       "L4_nov21",
                       "L1_jan22",
                       "L2_jan22",
                       "L3_jan22",
                       "L4_jan22")
    
     # Sample types for plot
     sample_types <- c("Filtering control,
                      Filtering control")
     
     # Curated ID levels
     id_levels <- filt_stats_IDs_samples$`Curated ID` %>% 
       unique() %>% 
       sort()
       
     # Plotting
     filtered_plot <-
       filt_stats_IDs_samples %>% 
       mutate(Sample = factor(Sample,
                              levels = sample_levels)) %>% 
       mutate(Class = ifelse(Class == "class of subphylum of phylum of kingdom of Bacteria", "(...) Bacteria", Class)) %>%    mutate(`Curated ID` = ifelse(`Curated ID` == "order of subclass of class of subphylum of phylum of kingdom of Bacteria", "(...) Bacteria", `Curated ID`)) %>% 
       mutate(Family = ifelse(Family == "family of suborder of order of subclass of class of subphylum of phylum of kingdom of Bacteria", "(...) Bacteria", Family)) %>% 
       mutate(`Curated ID` = ifelse(`Curated ID` == "genus of subfamily of Trichomycteridae", "(...) Trichomycteridae", `Curated ID`)) %>%
       mutate(sample_type = case_when(str_detect(Sample, "^br_") ~ "Filtration\n control", str_detect(Sample, "PCR") ~ "PCR control", TRUE ~ "Sample")) %>% 
       mutate(`Curated ID`= factor(`Curated ID`, 
                                   levels = rev(sort(unique(`Curated ID`))))) %>% 
      ggplot(aes(Sample, 
                 `Curated ID`, 
                 fill = `RRA %`)) +
      geom_tile() +
      facet_grid(cols = vars(sample_type),
                 rows = c(vars(Class)
                          # vars(Family)),
                 ),
                 space = "free",
                 scales = "free",
                 drop = TRUE) +
      geom_text(aes(label = sprintf("%.3f%%", `RRA %`)),
                    color = "black",
                    size = 2) +
      scale_fill_continuous_sequential("BluGrn") +
      theme(panel.grid.major = element_line(
              color = "grey", linewidth = 0.2, linetype = 1),
            strip.background = element_rect(fill = "#e4e4e4"),
            strip.text = element_text(
              size = 8.5, 
              face = "bold", 
              color = "black"),
            axis.text.y = element_text(size = 8.5, 
                                       face = "italic"),
            axis.title = element_text(size = 10, 
                                      face = "bold"),
            axis.text.x = element_text(angle = 45, 
                                       hjust = 0.85,
                                       vjust = 0.85),
            strip.text.y = element_text(angle = 0)) +
       labs(fill = 'RRA (%)',
            x = "Sample",
            y = "Taxa")

        ggsave(plot = filtered_plot,
               filename = paste("/home/gabriel/projetos/LI_paper/results/figures/", "filtered_plot", "-", Sys.Date(), ".pdf", sep = ""), units = "cm",
               # filename = paste("/home/gabriel/projetos/LI_paper/results/figures/", "filtered_plot_fam", "-", Sys.Date(), ".pdf", sep = ""), units = "cm",
               # height = 27.5, 
               height = 35.5,
               # width = 30.5,
               width = 35.5,
               dpi = 600)
```

## Preliminary tables

-   Creating a table to evaluate the raw data after pipeline processing

```{r}
raw_resume <- raw_results_tbl %>% 
  group_by(Sample) %>%
  mutate("Abd total" = sum(Abundance)) %>%
  ungroup() %>%
  group_by(`Curated ID`) %>% 
  mutate("Abundancia total" = sum(Abundance)) %>% 
  ungroup %>% 
  group_by(`Final ID (BLASTn)`) %>% 
  mutate("Reads totais" = sum(Abundance)) %>% 
  ungroup() %>% 
  group_by(Sample) %>%
  mutate("RRA by sample" = (Abundance/`Abd total`)*100) %>% 
  reframe(
    "Total reads" = `Reads totais`,
    "Total abundance" = `Abundancia total`,
    "RRA" = sum(`RRA by sample`),
    "ASVs" = length(unique(`ASV header`)),
    "OTUs" = length(unique(OTU)),
    "Reads" = sum(Abundance),
    "Class" = `Class (BLASTn)`,
    "Order" = `Order (BLASTn)`,
    "Family" = `Family (BLASTn)`,
    "Genus" = `Genus (BLASTn)`,
    "Curated ID" = `Curated ID`
  ) %>%
  unique()
```

### Table S2

**Integrative curation summary of Amplicon Sequence Variants (ASVs) before class- and abundance-based filtering.** The table lists all ASVs with their corresponding taxonomic classifications and read abundances (raw counts) prior to curation. Post-filtering, a refined subset of these ASVs was used for downstream analyses (see Methods).

```{r}
# Creating a table to use to evaluate the unfiltered data

# 1st Longer table
dt_all_resume <- curated_full_tbl %>% 
  group_by(Level, Site, Filter, Year) %>%
  mutate("Abd total" = sum(Abundance)) %>%
  ungroup() %>%
  group_by(`Curated ID`) %>% 
  mutate("Abundancia total" = sum(Abundance)) %>% 
  ungroup %>% 
  group_by(`Final ID (BLASTn)`) %>% 
  mutate("Reads totais" = sum(Abundance)) %>% 
  ungroup() %>% 
  group_by(`Curated ID`, `Final ID (BLASTn)`, `Site`, 
           `Level`, `Filter`, `Year`) %>%
  mutate("RRA no periodo" = (Abundance/`Abd total`)*100) %>% 
  reframe(
    "Total reads" = `Reads totais`,
    "Total abundance" = `Abundancia total`,
    "RRA" = sum(`RRA no periodo`),
    "ASVs" = length(unique(`ASV header`)),
    "OTUs" = length(unique(OTU)),
    "Reads" = sum(Abundance),
    "Class" = `Class (BLASTn)`,
    "Order" = `Order (BLASTn)`,
    "Family" = `Family (BLASTn)`,
    "Genus" = `Genus (BLASTn)`
  ) %>%
  unique() 

# View(dt_all_resume)

# Testing if RRA was calculated right
dt_all_resume %>%
  group_by( `Site`, `Level`, `Filter`, `Year`) %>%
  summarise(total_RRA = sum(RRA, na.rm = TRUE)) %>%
  ungroup() %>% View()

# Wider table to evaluate unfiltered data
{wider_dt_all_resume <- dt_all_resume %>% 
  mutate(RRA = round(RRA,digits = 4)) %>% 
  ungroup() %>% 
  unite(Site, Level, Year, Filter, col= "Site_Level_Year") %>% 
  pivot_wider(id_cols = c("Class","Curated ID", "Final ID (BLASTn)", "Total reads", "Total abundance"),
              # names_from = Site_Level_Year_Filter,
              names_from = Site_Level_Year,
              values_from =  c("RRA","ASVs","OTUs","Reads"),
              names_glue = "{Site_Level_Year}_{.value}") %>%
  select(sort(colnames(.))) %>% 
  relocate("Class","Curated ID","Final ID (BLASTn)","Total reads", "Total abundance",
           #2020 MCE
           "P1_High_2020_MCE_Reads",
           "P1_High_2020_MCE_ASVs",
           "P1_High_2020_MCE_OTUs",
           "P1_High_2020_MCE_RRA",
           "P2_High_2020_MCE_Reads",
           "P2_High_2020_MCE_ASVs",
           "P2_High_2020_MCE_OTUs",
           "P2_High_2020_MCE_RRA",
           #2021 MCE
           "P1_Low_2021_MCE_Reads",
           "P1_Low_2021_MCE_ASVs",
           "P1_Low_2021_MCE_OTUs",
           "P1_Low_2021_MCE_RRA",
           "P2_Low_2021_MCE_Reads",
           "P2_Low_2021_MCE_ASVs",
           "P2_Low_2021_MCE_OTUs",
           "P2_Low_2021_MCE_RRA",
           "P3_Low_2021_MCE_Reads",
           "P3_Low_2021_MCE_ASVs",
           "P3_Low_2021_MCE_OTUs",
           "P3_Low_2021_MCE_RRA",
           "P4_Low_2021_MCE_Reads",
           "P4_Low_2021_MCE_ASVs",
           "P4_Low_2021_MCE_OTUs",
           "P4_Low_2021_MCE_RRA",
           #2022 MCE
           "P1_High_2022_MCE_Reads",
           "P1_High_2022_MCE_ASVs",
           "P1_High_2022_MCE_OTUs",
           "P1_High_2022_MCE_RRA",
           "P2_High_2022_MCE_Reads",
           "P2_High_2022_MCE_ASVs",
           "P2_High_2022_MCE_OTUs",
           "P2_High_2022_MCE_RRA",
           "P3_High_2022_MCE_Reads",
           "P3_High_2022_MCE_ASVs",
           "P3_High_2022_MCE_OTUs",
           "P3_High_2022_MCE_RRA",
           "P4_High_2022_MCE_Reads",
           "P4_High_2022_MCE_ASVs",
           "P4_High_2022_MCE_OTUs",
           "P4_High_2022_MCE_RRA"
  )}

View(wider_dt_all_resume)

write.csv(wider_dt_all_resume, paste0(tbl_path, "/wider_dt_all_resume_2025.csv"))
```

### Table S5

**Table S5. Post-curation and filtering results for retained species.** This table presents the total read abundance per species across all samples (Total abundance), absolute number of reads per species at each sampling point and campaign (Reads), number of ASVs (ASVs) and OTUs (OTUs) assigned to each species, and Relative Read Abundance (RRA). This table reflects the final dataset used for statistical and ecological analyses after integrative curation (see Methods).

```{r}
# Creating the table with data to be used in analysis
# Filtered data, only Actinopteri and reads >=100

filt_tbl <- curated_full_tbl %>% 
  filter(`Class (BLASTn)` %in% "Actinopteri",
         !`Curated ID` %in% c("Salmo salar")) %>% 
  group_by(`Curated ID`, Site, Level, Filter, Year) %>% 
  mutate(Reads = sum(Abundance)) %>% 
  filter(Reads >= 100) %>% 
  ungroup()

View(filt_tbl)

# Filtered and grouped data by Samples
grouped_sampled_filt_tbl <- curated_full_tbl %>% 
  filter(`Class (BLASTn)` %in% "Actinopteri",
         !`Curated ID` %in% c("Salmo salar")) %>% 
  group_by(`Curated ID`, Sample) %>% 
  mutate(Reads = sum(Abundance)) %>% 
  filter(Reads >= 100) %>% 
  ungroup() %>% 
  # creating total abundance by sample
  group_by(Sample) %>%
  mutate("Abd total" = sum(Abundance)) %>%
  ungroup() %>% 
  # calculating RRA by Sample
  group_by(`Curated ID`, Sample) %>%
  mutate("RRA na amostra" = (Abundance/`Abd total`*100)) %>% 
  summarize("Site" = dplyr::first(Site),
          "Year" = dplyr::first(Year),
          "Expedition" = dplyr::first(Expedition),
          "Level" = dplyr::first(Level),
          "Filter" = dplyr::first(Filter),
          "Class" = dplyr::first(`Class (BLASTn)`),
          "Order" = dplyr::first(`Order (BLASTn)`),
          "Family" = dplyr::first(`Family (BLASTn)`),
          "Genus" = dplyr::first(`Genus (BLASTn)`),
          "Reads" = sum(Abundance),
          "Sample abundance" = dplyr::first(`Abd total`),
          "RRA" = sum(`RRA na amostra`),
          "ASVs" = length(unique(`ASV header`)),
          "OTUs" = length(unique(OTU)),
          ) 

View(grouped_sampled_filt_tbl)

# Is RRA correct?
grouped_sampled_filt_tbl %>%
  group_by(Sample) %>%
  summarise(total_RRA = sum(RRA, na.rm = TRUE)) %>%
  ungroup()

# Filtered and grouped data by Year, Site and Filter

# A tabela wider precisa dessas informacoes separadamente
grouped_filt_tbl <- filt_tbl %>%
  # creating total abundance by period
  group_by(Level, Site, Filter, Year) %>%
  mutate("Abd total" = sum(Abundance)) %>%
  ungroup() %>%
  # creating total abundance by Curated ID
  group_by(`Curated ID`) %>% 
  mutate("Abundancia total" = sum(Abundance)) %>% 
  ungroup() %>% 
  # calculating RRA by period
  group_by(`Curated ID`, Site, Level, Filter, Year) %>%
  mutate("RRA no periodo" = (Abundance/`Abd total`)*100) %>% 
  reframe("Curated ID" = `Curated ID`,
          "Class" = `Class (BLASTn)`,
          "Order" = `Order (BLASTn)`,
          "Family" = `Family (BLASTn)`,
          "Genus" = `Genus (BLASTn)`,
          "Reads" = sum(Abundance),
          "Period abundance" = `Abd total`,
          "Total abundance" = `Abundancia total`, 
          "RRA" = sum(`RRA no periodo`),
          "ASVs" = length(unique(`ASV header`)),
          "OTUs" = length(unique(OTU))) %>% 
  unique()

View(grouped_filt_tbl)

# Is RRA correct?
grouped_filt_tbl %>%
  group_by(Site, Level, Filter, Year) %>%
  summarise(total_RRA = sum(RRA, na.rm = TRUE)) %>%
  ungroup()

# Tabela wider com os dados filtrados
  wider_filt_tbl <- grouped_filt_tbl %>% 
  mutate(RRA = round(RRA,digits = 4)) %>% 
  ungroup() %>% 
  unite(Site, Level, Year, col= "Site_Level_Year") %>% 
  pivot_wider(id_cols = c("Curated ID", "Total abundance"),
              names_from = Site_Level_Year,
              values_from =  c("RRA","ASVs","OTUs","Reads"),
              names_glue = "{Site_Level_Year}_{.value}") %>%
  select(sort(colnames(.))) %>% 
  relocate("Curated ID",
           "Total abundance",
           #2020 MCE
           "P1_High_2020_Reads",
           "P1_High_2020_ASVs",
           "P1_High_2020_OTUs",
           "P1_High_2020_RRA",
           "P2_High_2020_Reads",
           "P2_High_2020_ASVs",
           "P2_High_2020_OTUs",
           "P2_High_2020_RRA",
           #2021 MCE
           "P1_Low_2021_Reads",
           "P1_Low_2021_ASVs",
           "P1_Low_2021_OTUs",
           "P1_Low_2021_RRA",
           "P2_Low_2021_Reads",
           "P2_Low_2021_ASVs",
           "P2_Low_2021_OTUs",
           "P2_Low_2021_RRA",
           "P3_Low_2021_Reads",
           "P3_Low_2021_ASVs",
           "P3_Low_2021_OTUs",
           "P3_Low_2021_RRA",
           "P4_Low_2021_Reads",
           "P4_Low_2021_ASVs",
           "P4_Low_2021_OTUs",
           "P4_Low_2021_RRA",
           #2022 MCE
           "P3_High_2022_Reads",
           "P3_High_2022_ASVs",
           "P3_High_2022_OTUs",
           "P3_High_2022_RRA",
           "P4_High_2022_Reads",
           "P4_High_2022_ASVs",
           "P4_High_2022_OTUs",
           "P4_High_2022_RRA")

View(wider_filt_tbl)

write.csv(wider_filt_tbl, paste0(tbl_path, "/wider_dt_filt_2025.csv"))
```

## Initial data assesment

### No Reads by sample after sequencing

```{r}
options(scipen = 999)

seq_read_counts <- read_excel("/home/gabriel/projetos/peixes-eDNA/analises/dez_23/runs_2_4_5_EM156/results/LI-reads_and_seqs_counts2024-01-08.xlsx") %>% 
  tibble() %>%
  # only MCE samples
  filter(Sample %in% c("L1_nov_dec_20_mi", "L2_nov20",
                       "L2_dez20", "L1_out21", "L2_out21",
                       "L3_out21", "L4_out21", "L1_nov21",
                       "L2_nov21", "L3_nov21", "L1_jan22",
                       "L2_jan22", "L3_jan22", "L4_jan22",
                       "br_jan_22","EM113_NEGPCR1",
                       "EM135c4c5_NEGPCR1",
                       "EM135c4c5_NEGPCR2",
                       "EM149_NEGPCR1","EM149_NEGPCR2",
                       "EM156_NegPCR1", "S724_NEGPCR1")) %>% 
  summarise("Total reads" = sum(`Raw reads (pairs)`))
```

### No reads after post-pipeline and filtering

-   This section computes the total read count per sample that remained after data processing and filtering. This final, high-quality dataset was used for all downstream analyses. The filtering criteria included: exclusion of NA values, restriction to the Actinopteri group, and a minimum threshold of 100 reads per curated taxonomic ID

```{r}
filt_raw_reads <- grouped_sampled_filt_tbl %>%
  # group_by(`Curated ID`) %>% # grouped_filt_tbl
  group_by(Sample) %>% # grouped_filt_tbl
  summarise(total_abd_filt = sum(Reads))

View(filt_raw_reads)

sum(filt_raw_reads$total_abd_filt)
```

### IDs metrics pre-pipeline and filtering

```{r}
# Total reads in ASVs, OTUs, Orders, Families, Genus, Species and Nspecies for raw data

raw_stats <- raw_resume %>%
  group_by(Class) %>% 
  reframe(
    "Total reads" = sum(Reads),
    "ASVs" = sum(ASVs),
    "OTUs" = sum(OTUs),
    "Orders" = length(unique(Order)),
    "Families" = length(unique(Family)),
    "Genera" = length(unique(Genus)),
    "Species" = length(unique(`Curated ID`[grepl("^[A-Za-z]+\\s[A-Za-z]+$", `Curated ID`) & !grepl("sp\\.", `Curated ID`)])),
    "Nspecies" = length(unique(`Curated ID`)) - Species
  ) %>%
  unique()

View(raw_stats)
```

### IDs metrics post-pipeline and filtering

```{r}
grouped_filt_stats <- grouped_filt_tbl %>% #dependendo da tabela, resultados diferentes
  group_by(Class) %>% # Grouped by Class
  # group_by(Order) %>% # Grouped by Order
  # group_by(Family) %>% # Grouped by Family
  # group_by(Genus) %>% # Grouped by Genus
  # group_by(`Curated ID`) %>% # Grouped by Species
  reframe(
    "Total reads" = sum(Reads),
    "ASVs" = sum(ASVs),
    "OTUs" = sum(OTUs),
    "Orders" = length(unique(`Order`)),
    "Families" = length(unique(`Family`)),
    "Genera" = length(unique(`Genus`)),
    "Species" = length(unique(`Curated ID`[grepl("^[A-Za-z]+\\s[A-Za-z]+$", `Curated ID`) & !grepl("sp\\.", `Curated ID`)])),
    "Nspecies" = length(unique(`Curated ID`)) - Species
  ) %>%
  unique()
```

### Table S6

```{r}
# Mean and SD of alpha-diversity
grouped_filt_site <- grouped_filt_tbl %>% #dependendo da tabela, resultados diferentes
  group_by(Level, Site) %>% 
  mutate(
    "Diversity" = length(unique(`Curated ID`))) %>%
  ungroup() %>% 
  select(Level, Site, Diversity) %>% 
  unique() %>% 
  group_by(Level) %>% 
  mutate(
    "Mean" = mean(Diversity),
    "SD" = sd(Diversity))
```

## Exploratory data assesment

```{r}
# Reads through data filtering 
raw_results_reads <- raw_results_tbl %>% group_by(Sample) %>% 
  summarise(`Raw reads` = sum(Abundance))

pre_filt_reads <- pre_filt_tbl %>% group_by(Sample) 

filt_reads <- filt_tbl %>% group_by(Sample) %>% 
  summarise(`Filt reads` = sum(Abundance))

evol_reads <- raw_results_reads %>%
  left_join(pre_filt_reads, by = "Sample") %>%
  left_join(filt_reads, by = "Sample") %>% 
  group_by(`Raw reads`, `Filt reads`) %>% 
  select(Sample, `Raw reads`, `Filt reads`) %>% 
  unique()

View(evol_reads)

# ASVs that weren't identified at species Level (genus + epithet)
spp_level <- grouped_filt_tbl %>%
  reframe("Species" = unique(`Curated ID`[grepl("^[A-Za-z]+\\s[A-Za-z]+$", `Curated ID`) & 
                                            !grepl("sp\\.", `Curated ID`)]))
nspp_level <- grouped_filt_tbl %>% 
  reframe("Nspecies" = setdiff(unique(`Curated ID`), spp_level$Species))
    
View(nspp_level) 

# Informations grouped by taxa detected 
id_level <- grouped_filt_tbl %>%
  group_by(`Curated ID`) %>%
    reframe("Order" = Order, "Family" = Family, "Genus" = Genus,
      "Curated identification" = `Curated ID`,
      "Reads" = sum(Reads), 
      "ASVs" = sum(ASVs),
      "OTUs" = sum(OTUs),
    ) %>% 
    unique() %>% 
    select("Order", "Family", "Genus",
           # "Maior hit do BLASTn",
           "Curated identification",
           "Reads", "ASVs","OTUs") 

View(id_level)

# Arquivo para artigo
write.xlsx(id_level, paste0(tbl_path, "/id_level_tbl.xlsx"))

# Informations grouped  by Class
class_Level <- grouped_filt_tbl %>%
  reframe(
    "Total reads" = sum(Reads), 
    "ASVs" = sum(ASVs),
    "OTUs" = sum(OTUs),
    "Orders" = length(unique(Order)),
    "Families" = length(unique(Family)),
    "Genera" = length(unique(Genus)),
    "Identifications" = length(unique(`Curated ID`)),
    "Species" = length(unique(`Curated ID`[grepl("^[A-Za-z]+\\s[A-Za-z]+$", `Curated ID`) & 
                                               !grepl("sp\\.", `Curated ID`)])), # IDs a Level de spp
    "Nspecies" = length(unique(`Curated ID`)) - Species) # IDs em outros niveis taxonomicos
  
View(class_Level)
  
# Informations grouped by Order
order_level <- grouped_filt_tbl %>%
  filter(Filter %in% "MCE") %>%
  group_by(Order) %>%
  reframe(
    # "Curated ID" = `Curated ID`,
    "Order" = Order,
    "Total reads" = sum(Reads), # dt_all_resume && # dt_filt
    "ASVs" = sum(ASVs),
    "OTUs" = sum(OTUs),
    "Families" = length(unique(Family)),
    "Genera" = length(unique(Genus)),
    "Identifications" = length(unique(`Curated ID`)),
    "Species" = length(unique(`Curated ID`[grepl("^[A-Za-z]+\\s[A-Za-z]+$", `Curated ID`) & !grepl("sp\\.", `Curated ID`)])), # a nivel de spp
    "Nspecies" = length(unique(`Curated ID`)) - Species # em outros niveis alem de spp
    ) %>% 
  unique()
  
View(order_level)

# Arquivo para artigo
# write.xlsx(order_level, paste0(tbl_path, "/order_level_tbl.xlsx"))
write.xlsx(order_level, paste0(tbl_path, "/order_level_tbl.xlsx"))

# Informations grouped by Family
family_level <- grouped_filt_tbl %>%
  filter(Filter %in% "MCE") %>%
  group_by(Family) %>%
  reframe(
    "Order" = Order,
    "Total reads" = sum(Reads), 
    "ASVs" = sum(ASVs),
    "OTUs" = sum(OTUs),
    "Genera" = length(unique(Genus)),
    "Identifications" = length(unique(`Curated ID`)),
    "Species" = length(unique(`Curated ID`[grepl("^[A-Za-z]+\\s[A-Za-z]+$", `Curated ID`) & !grepl("sp\\.", `Curated ID`)])), # a nivel de spp
    "Nspecies" = length(unique(`Curated ID`)) - Species # em outros niveis alem de spp
    ) %>% 
  unique()
  
View(family_level)

# Informations grouped by Sample
grouped_by_Sample <- filt_tbl %>%
 # filter(Expedition %in% "Novembro 2021") %>%
 select(Sample, Filter, Reads, Site) %>%
 group_by(Filter,
          Sample
          ) %>%
 mutate("Total reads" = sum(Reads)) %>%
 reframe(Filter,
         # Sample,
         Site,
         `Total reads`) %>%
 unique()

# View(grouped_by_Sample)

# Especies encontradas em apenas uma amostra
Counts <- grouped_filt_tbl %>% 
  group_by(`Curated ID`) %>%
  # group_by(`Curated ID`, Filter) %>%
  reframe(count = n_distinct(Sample),
            Filter, Sample) %>% 
  unique()

unique_counts <- 
  Counts %>% filter(count == 1) %>% 
  reframe(`Curated ID`,
          Sample)

View(unique_counts)
```
