---
title: "LI paper scripts"
format: html
editor: visual
author: 
  - "Mendes, GA"
date: "`r format(Sys.time(), '%d %B, %Y')`"
editor_options: 
  chunk_output_type: console
---

This pipeline integrates public tools available for metabarcoding analyses. To share or reproduce this content, please require authors' consent.**\
**Contact: [gabrielmendesbrt\@gmail.com](mailto:gabrielmendesbrt@gmail.com){.email}

# Bioinformatics

## Housekeeping

-   Load project environment and necessary libraries

    ```{r}
    # load(file = "/home/gabriel/projetos/LI_paper/Environments/...RData")

    # Loading libraries ----

    { library("tidyverse")
      library("Biostrings")
      library("DECIPHER")
      library("phyloseq")
      library("vegan")
      library("readxl")
      library("ggpubr")
      library("ggplot2")
      library("ggsignif")
      library("ggrepel")
      library("openxlsx")
      }
    ```

<!-- -->

-   Create project folders

    ```{r}
    # Creating and loading paths ----
    {
      prjct_path <- "/home/gabriel/projetos/LI_paper"
      prjct_radical <- "eDNA_Lagoa-dos-Ingleses"
      scripts_path <- paste0(prjct_path,"/scripts")
      results_path <- paste0(prjct_path,"/results")
      figs_path <- paste0(results_path,"/figures")
      tbl_path <- paste0(results_path,"/tables")
      env_path <- paste0(prjct_path,"/environment")
      paths <- c(scripts_path, results_path, figs_path, tbl_path, env_path)
    }

    for (dir in paths) {
      if (dir.exists(dir)) {
        print(paste("The directory", dir, "already exists!"))
      } else {
        print(paste("Making", dir, "!" ))
        dir.create(dir) 
      }
    }
    ```

<!-- -->

-   Data acquring

    ```{r}
    pre_raw_results_tbl <- read_excel("/home/gabriel/projetos/lagoa_ingleses/tabelas/curated/curated-Complete_analysis_results-2024-01-10.xlsx") %>% tibble()
    curated_ids_tbl <- read_excel("/home/gabriel/projetos/lagoa_ingleses/tabelas/curated/curated_lagoa_ingleses-ASVs_x_amostras-2024-01-09.xlsx") %>% tibble()
    blast_tax <- read.csv("/home/gabriel/projetos/lagoa_ingleses/tabelas/raw/tax_blast.csv", sep = ",", check.names = FALSE)
    ```

## Integrating raw and curated data

### Obtaining data

-   Selecting colunms and adjusting the raw data table

```{r}
pre_raw_results_tbl <-
  pre_raw_results_tbl %>%
  select(
    "Sample", "Unique_File_name", "OTU", "Abundance", "Obs. Curadoria", 
    "Possible contamination", "Read origin", "Primer expected length", 
    "ASV Size (pb)", "ASV header"
  ) %>%
  mutate(Sample = str_replace(Sample, "__", "_"))
```

-   Selecting colunms from curated identifications table

```{r}
curated_ids_tbl <- # Curated identifications df
  curated_ids_tbl %>%
  select(
    "ASV header", "ASV (Sequence)", "Curated ID", 
    "Final ID (BLASTn)", "BLASTn pseudo-score", 
    "Class (BLASTn)", "Curated Order (BLASTn)") %>%
  unique()
```

### Data integration and Taxonomic Enrichment

-   Joining the results table with curated identifications

    ```{r}
    raw_results_tbl <- pre_raw_results_tbl %>%
      left_join(curated_ids_tbl, by = "ASV header") %>%
      select("ASV header","ASV (Sequence)", "Curated ID", 
             "Final ID (BLASTn)","BLASTn pseudo-score", 
             "Class (BLASTn)", "Curated Order (BLASTn)",
             "Sample", "Unique_File_name", "OTU", "Abundance", 
             "Obs. Curadoria","Read origin", 
             "Primer expected length", "ASV Size (pb)")
    ```

<!-- -->

-   Adding complete taxonomy from BLASTr output

    ```{r}
    # Prepare the BLAST taxonomy table
    blast_tax_less <- blast_tax[2:85] %>%
      select(ASV,`Family (BLASTn)`) %>% 
      rename(`ASV (Sequence)` = "ASV") %>%
      left_join(raw_results_tbl, by = "ASV (Sequence)") %>% 
      mutate("Genus (BLASTn)" = 
               str_split_fixed(string = .$`Curated ID`, 
                               pattern = " ", n = 2)[,1]) %>% 
      select("ASV (Sequence)", 
             "Family (BLASTn)", 
             "Genus (BLASTn)")

    # Join the taxonomy to the main table
    raw_results_tax_tbl <- raw_results_tbl %>%
      left_join(blast_tax_less, 
                by = "ASV (Sequence)") %>% 
      select("ASV header", "ASV (Sequence)", "Curated ID", 
             "Final ID (BLASTn)", "BLASTn pseudo-score", 
             "Class (BLASTn)", "Family (BLASTn)", "Genus (BLASTn)",
             "Curated Order (BLASTn)", "Sample", 
             "Unique_File_name", "OTU", "Abundance", 
             "Obs. Curadoria", "Read origin", 
             "Primer expected length", 
             "ASV Size (pb)") %>% 
      unique() %>% 
      rename("Order (BLASTn)" = "Curated Order (BLASTn)")
    ```

### Metadata integration

Finally, we create a metadata table containing information about each sample (such as location, date, and filter type) and join it with the sequencing data. This information was not included in the initial bioinformatics metabarcoding pipeline input, so it's being explicitly incorporated at this stage.

-   Creating the metadata dataframe

    ```{r}
    # Vectors with information for each sample
    Sample <- c("L1_nov_dec_20_mi", "L2_nov20", "L2_dez20", "L1_out21", "L2_out21", "L3_out21", "L4_out21", "L1_nov21", "L2_nov21", "L3_nov21", "L4_nov21", "STX_L1_nov21", "STX_L2_nov21", "STX_L3_nov21", "STX_L4_nov21", "L1_jan22", "L2_jan22", "L3_jan22", "L4_jan22")

    Expedition <- c("November and December 2020", "November 2020", "December 2020", "October 2021", "October 2021", "October 2021", "October 2021", "November 2021", "November 2021", "November 2021", "November 2021", "November 2021", "November 2021", "November 2021", "November 2021", "January 2022", "January 2022", "January 2022", "January 2022")
    Year <- c("2020", "2020", "2020", "2021", "2021", "2021", "2021", "2021", "2021", "2021", "2021", "2021", "2021", "2021", "2021", "2022", "2022", "2022", "2022")
    Site <- c("P1", "P2", "P2", "P3", "P4", "P2", "P1", "P3", "P4", "P2", "P1", "P3", "P4", "P2", "P1", "P3", "P4", "P2", "P1")

    Filter <- c("MCE", "MCE", "MCE", "MCE", "MCE", "MCE", "MCE", "MCE", "MCE", "MCE", "MCE", "Sterivex", "Sterivex", "Sterivex", "Sterivex", "MCE", "MCE", "MCE", "MCE")

    Run <- c("Run2_ago21", "Run4_out21", "Run4_out21", "Run5_dez21", "Run5_dez21", "Run5_dez21", "Run5_dez21", "Run5_dez21", "Run5_dez21", "Run5_dez21", "Run5_dez21", "EM156", "EM156", "EM156", "EM156", "EM156", "EM156", "EM156", "EM156")

    Level <- c("High", "High", "High", "Low", "Low", "Low", "Low", "Low", "Low", "Low", "Low", "Low", "Low", "Low", "Low", "High", "High", "High", "High")

    # Combine vectors into a tibble
    metadata_tbl <- tibble(Run, Sample, Filter, Site, Expedition, Year, Level)
    ```

-   Joining data with metadata

    ```{r}
    raw_results_full_tbl <- left_join(raw_results_tax_tbl, 
                                      metadata_tbl, 
                                      by = "Sample") %>%
      select(
        "ASV header", "ASV (Sequence)", "Curated ID",
        "Obs. Curadoria", "Final ID (BLASTn)", 
        "BLASTn pseudo-score", "Class (BLASTn)", 
        "Family (BLASTn)","Genus (BLASTn)", 
        "Order (BLASTn)", "Sample", "Unique_File_name", 
        "OTU", "Abundance", "Read origin", 
        "Primer expected length", "ASV Size (pb)", 
        "Run", "Filter", "Site", "Expedition", "Year", 
        "Level"
        )
    ```

### Manual corrections

-   Correcting taxonomic identifications after curation

    ```{r}
    # Update families for specific genera (february 10th 2025)
    raw_results_full_tbl <- raw_results_full_tbl %>% 
      mutate(`Family (BLASTn)` = 
               ifelse(`Genus (BLASTn)` %in% c("Psalidodon", 
                                              "Moenkhausia", 
                                              "Astyanax", 
                                              "Hemigrammus", 
                                              "Oligosarcus"),
                      "Acestrorhamphidae", `Family (BLASTn)`)) %>%
      mutate(`Family (BLASTn)` = 
               ifelse(`Genus (BLASTn)` %in% "Piabina",
                      "Stevardiidae",
                      `Family (BLASTn)`))

    # Group Hoplias species (february 25th 2025)
    raw_results_full_tbl <- raw_results_full_tbl %>%
      mutate(`Curated ID` =
               ifelse(`Curated ID` %in% c("Hoplias malabaricus", "Hoplias intermedius"),
                      "Hoplias sp.", `Curated ID`))
    ```

### Data filtering

-   We remove reads outside the expected size range, "NA" identifications, potential contaminants from birds and mammals with low scores, and data from negative controls. Only data generated with MCE filter are used for downstream analyses.

    ```{r}
    curated_full_tbl
    curated_full_tbl_2 <-
      raw_results_full_tbl %>%
      filter(
        Filter == "MCE",
        `Primer expected length` != "out of range",
        !is.na(`Curated ID`),
        !(`Class (BLASTn)` %in% c("Mammalia", "Aves") & 
            `BLASTn pseudo-score` < 98),
        !Sample %in% c("EM113_NEGPCR1", "EM135c4c5_NEGPCR1", 
                       "EM135c4c5_NEGPCR2","EM149_NEGPCR1", 
                       "EM149_NEGPCR2", "EM156_NegPCR1",
                       "S724_NEGPCR1", "br_jan_22", 
                       "br_nov21"),
        `Obs. Curadoria` != "Possible contamination"
        )
    ```

-   Analysis of removed data

    ```{r}
    # All MCE ASVs filtered from dataset
    filt_asvs <- 
      setdiff(raw_results_full_tbl,
              curated_full_tbl_2) %>%
      filter(!(Filter) %in% "Sterivex")

    # Infos about classes of ASVs filtered
    filt_stats_class <- 
      filt_asvs %>%
      group_by(`Class (BLASTn)`) %>%
      reframe("Total reads" = sum(Abundance),
              "ASVs" = length(unique(`ASV (Sequence)`)),
              "OTUs" = length(unique(OTU)),
              "Families" = length(unique(`Family (BLASTn)`)))

    # Infos about fish ASVs filtered
    filt_stats_fish <- 
      filt_asvs %>%
      filter(`Class (BLASTn)` == "Actinopteri") %>% 
      group_by(`Curated ID`) %>%
      reframe("Total reads" = sum(Abundance),
              "ASVs" = length(unique(`ASV (Sequence)`)),
              "OTUs" = length(unique(OTU)),
              "Families" = length(unique(`Family (BLASTn)`)))

    # Infos about samples filtered from dataset
    filt_stats_sample <-
      filt_asvs %>% 
      group_by(Sample) %>% 
      reframe("Total reads" = sum(Abundance),
              "ASVs" = length(unique(`ASV (Sequence)`)),
              "OTUs" = length(unique(OTU)),
              "Families" = length(unique(`Family (BLASTn)`)))

    # Infos about Curated IDs filtered from dataset
    options(scipen = 999)

    filt_stats_IDs_all <- 
        filt_asvs %>%
        group_by(`Curated ID`, `Final ID (BLASTn)`) %>%
        reframe("Nº Reads" = sum(Abundance),
                "Class" = paste(unique(`Class (BLASTn)`),
                                collapse = ", "),
                "Samples" = paste(unique(Sample), 
                                  collapse = ", "),
                "Reason" = paste(
                  unique(c(
                    if (any(`Curated ID` == "NA"))
                      "Curated ID is NA", 
                    if (any(`Obs. Curadoria` == 
                            "Possible contamination")) 
                      "Possible contamination",
                    if (any(`Primer expected length` == 
                            "out of range")) 
                      "out of range",
                    if (any(`Class (BLASTn)` != "Actinopteri" & 
                             !is.na(`Class (BLASTn)`))) 
                    paste("Class:", unique(`Class (BLASTn)`)), 
                    collapse = ", ")))) %>%
        ungroup() %>%
        mutate("%_Total" = round(`Nº Reads` /
                                   sum(`Nº Reads`) * 100,
                                 digits = 4)) %>%
        select(`Curated ID`, 
               `Final ID (BLASTn)`, 
               Class, `Nº Reads`, 
               `%_Total`, 
               Samples, 
               Reason) %>% 
        arrange(desc(`Nº Reads`))

    # Infos about Curated IDs filtered 
    # from dataset for each sample
    filt_stats_IDs_full <- 
      filt_asvs %>%
      filter(!is.na(`Curated ID`),
             `Class (BLASTn)` %in% "Actinopteri",
             # Sample %in% c("L1_jan22", "L2_jan22")
             ) %>%
      
      group_by(Sample) %>%
      mutate(Abundance_s = sum(Abundance)) %>%
      ungroup() %>%
      
      group_by(`Curated ID`, `Final ID (BLASTn)`, Sample) %>%
      summarise("Reads_s" = sum(Abundance),
                "Abundance_s" = first(Abundance_s)) %>%
      ungroup() %>% 
      
      group_by(`Curated ID`, `Final ID (BLASTn)`) %>%
      mutate("Nº Reads" = sum(Reads_s),
             "Abundance_t" = sum(Abundance_s)) %>%
      ungroup() %>%         
      mutate("% Total" = `Nº Reads` / Abundance_t * 100,
             "% Amostra" = Reads_s / Abundance_s * 100) %>%
      arrange(desc(Reads_s))

    # Visualizar o resultado
    View(filt_stats_IDs)
    ```

-   Creating plots from tibbles above

    ```{r}

    ```

-   Verifying data loss

    ```{r}
    # Calculate total reads before filtering (MCE samples only)
    raw_n_meta_tbl <- 
      left_join(raw_results_tbl, metadata_tbl, by = "Sample") %>%
      filter(Filter %in% "MCE")
    total_raw <- sum(raw_n_meta_tbl$Abundance)

    # Calculate total reads after filtering
    total_filtered <- sum(curated_full_tbl$Abundance)

    # Calculate the percentage of removed reads
    percent_removed <- (total_raw - total_filtered) / total_raw * 100

    # Display the results
    cat(paste("Total raw reads (MCE):", total_raw))
    cat(paste("Total filtered reads (MCE):", total_filtered))
    cat(paste("Percentage removed:", round(percent_removed, 2), "%"))
    ```
